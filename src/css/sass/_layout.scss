// Layout do Projeto

// Tamanho do Container para dispositivos.
$container-xl: 1440px;
$container-l: 1216px;
$container-m: 960px;
$container-s: 620px;
$container-xs: 340px;

// Espaçamento padrão entre colunas.
$gutter: 32px;

// Mixin - Definindo responsividade através de funções, de forma automática.

// EX) Para aplicar em uma classe, responsividade em tela menor que 960px:
// @include responsive(s) {
//   SERÁ EXECUDATO O QUUE FOR PASSADO AQUI DENTRO!
// }

@mixin responsive($device) {
  @if $device == xl {
    // Para resoluções maiores que 1440px
    @media screen and (min-width: $container-xl) {
      @content;
    }
  } @else if $device == ul {
    // Para resoluções maiores que 960px
    @media screen and (min-width: $container-m) {
      @content;
    }
  } @else if $device == l {
    // Para resoluções entre 1140px e 1440px
    @media screen and (max-width: $container-xl) and (min-width: $container-l) {
      @content;
    }
  } @else if $device == m {
    // Para resoluções entre 960px e 1140px
    @media screen and (max-width: $container-l) and (min-width: $container-s) {
      @content;
    }
  } @else if $device == s {
    // Para resoluções menores que 960px
    @media screen and (max-width: $container-m) {
      @content;
    }
  } @else if $device == xs {
    // Para resoluções menores que 340px
    @media screen and (max-width: $container-xs) {
      @content;
    }
  }
}

// Função para dividir automaticamente a tela em Grids, são 12 no total.
// A função irá respeitar o tamanho de tela presente, com responsividade.
@function grid($col, $total: 12) {
  @return ($col / $total) * 100%;
}
// Looping da função p/ determinar tamanho do grid e responsividade.
@for $i from 1 through 12 {
  .grid-#{$i} {
    width: calc(#{grid($i)} - #{$gutter});
    margin: $gutter / 2;

    padding: 16px 0px;
    float: left;

    @include responsive(s) {
      width: calc(100% - #{$gutter});
      float: none;
    }
  }
}
// Looping da função p/ determinar apenas o tamnho do grid, sem "quebrar" a página.
@for $i from 1 through 12 {
  .grid-nobreak-#{$i} {
    width: calc(#{grid($i)} - #{$gutter});
    margin: $gutter / 2;

    padding: 16px 0px;
    float: left;
  }
}

// Estrutura de container para aplicar na página.
.container {
  max-width: $container-l; // Definindo tamanho padrão para container.
  margin: 0 auto; // Centralizando container.

  padding: 128px 24px; // Espaçamento-> eixo y: 128px - eixo x: 24px.

  // clearfix
  &::after {
    content: "";
    display: table;
    clear: both;
  }

  // Aplicando responsividade: ao chegar no 960px.
  @include responsive(s) {
    flex-direction: column;

    padding: 96px 16px;
  }
}

.disappear {
  @include responsive(s) {
    display: none;
  }
}

.hidden {
  // Evitar scroll para o lado, caso algum filho vaze o container.
  overflow: hidden;
}

.zindex-1 {
  z-index: -1;
}

.row {
  // clearfix
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

.relative {
  position: relative;
}

// Classes pré-definidas para FLEXBOX (Sempre aplicar na div pai)

// Alinhar elementos lado a lado.
.flex {
  display: flex;
}
// Flexbox p/ que os elementos fiquem alinhados da esquerda p/ direita.
.flex-start-row {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  flex-direction: row;
}
// Flexbox p/ que os elementos fiquem alinhados da direita p/ esquerda.
.flex-end-row {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  flex-direction: row;
}
// Flexbox p/ que os elementos fiquem em alinhados em coluna da esquerda p/ direita.
.flex-start-column {
  display: flex;
  justify-content: center;
  align-items: flex-start;
  flex-direction: column;
}
// Flexbox p/ que os elementos fiquem centralizados verticalmente e horizontalmente.
.flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}
// Flexbox p/ que os elementos fiquem em colunas e centralizados.
.flex-center-column {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}
// Flexbox p/ que os elementos fiquem alinhados em cada ponta da div.
.flex-space {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-direction: row;

  // Aplicar reponsividade.
  @include responsive(s) {
    //flex-direction: column;
    //align-items: flex-start;
  }
}
// Flexbox p/ que os elementos fiquem em colunas
.flex-column {
  flex-direction: column;
}
// Flexbox p/ que os elementos quebrem a linha no container, quando necessario.
.flex-wrap {
  flex-wrap: wrap;
}

.float-left {
  float: left;
}

// Biblioteca Flexbox | Itens filhos

// PROPRIEDADES DO ELEMENTO -> flex: (flex-grow) (flex-shrink) (flex-basis)
// (flex-grow): Capacidade do elemento se expandir em relação aos outros.
// (flex-shrink): Capacidade do elemento se contrair em relação aos outros.
// (flex-basis): Definir tamanho inicial do elemento antes de qualquer expansão ou contração.
.flex-item-1 {
  flex: 1 1 360px;
}

.flex-item-2 {
  flex: 2 1 360px;
}

.flex-item-3 {
  flex: 3 1 360px;
}

.flex-item-4 {
  flex: 4 1 360px;
}

.flex-item-5 {
  flex: 5 1 360px;
}

.flex-auto {
  flex: 1 1 auto;
}

// Larguras e Alturas

// Altura automática p/ o elemento.
.h-100 {
  height: 100vh;
}

.h-100p {
  height: 100%;
}

.h-auto {
  height: auto !important;
}
// Largura automática p/ o elemento.
.w-auto {
  width: auto;
}
// Largura de 100% do tamanho p/ o elemento em relação ao pai.
.w-100 {
  width: 100%;
}
// Largura de 75% do tamanho p/ o elemento em relação ao pai.
.w-75 {
  width: 75%;
}
// Largura de 50% do tamanho p/ o elemento em relação ao pai.
.w-50 {
  width: 50%;
}
// Largura de 25% do tamanho p/ o elemento em relação ao pai.
.w-25 {
  width: 25%;
}

// Bordas

// Borda abaixo do elemento.
.bb-black {
  border-bottom: 1px solid $black-light;
}
// Borda acima do elemento.
.bt-black {
  border-top: 1px solid $black-light;
}
// Borda a esquerda do elemento.
.bl-black {
  border-left: 1px solid $black-light;
}
// Borda a direita do elemento.
.br-black {
  border-right: 1px solid $black-light;
}

// Borda MAIS GROSSA abaixo do elemento.
.bb-gray {
  border-bottom: 2px solid $black-normal;
}
// Borda MAIS GROSSA acima do elemento.
.bt-gray {
  border-top: 2px solid $black-normal;
}
// Borda MAIS GROSSA a esquerda do elemento.
.bl-gray {
  border-left: 2px solid $black-normal;
}
// Borda MAIS GROSSA a direita do elemento.
.br-gray {
  border-right: 2px solid $black-normal;
}

// Backgrounds
.bg-gray {
  background-color: $black-normal;
}

// Tamanhos para logos
.logo {
  max-width: 64px;
  min-width: 48px;
}

// Definições para fotos de profile (avatar).
.profile {
  width: 48px;
  height: 48px;

  border-radius: 50%;
}
.profile-big {
  width: 128px;
  height: 128px;

  border-radius: 50%;
}
.profile-img {
  border-radius: 50%;
  border: 2px solid $primary-normal;
}
.card {
  border: 1px solid $black-light;
  border-radius: 4px;
  background-color: rgba(15, 20, 31, 0);

  transition: 0.2s ease;

  &:hover {
    background-color: rgba(15, 20, 31, 0.2);
  }
}

.bg-section {
  background-color: rgba(15, 20, 31, 0.5);
}

// Cards para sinalização ao usuário
.card-danger {
  border: 2px solid $red-normal;
  border-radius: 4px;

  background-color: rgba(240, 61, 61, 0.2);
}
.card-success {
  border: 2px solid $green-normal;
  border-radius: 4px;

  background-color: rgba(11, 176, 123, 0.2);
}
.card-warning {
  border: 2px solid $yellow-normal;
  border-radius: 4px;

  background-color: rgba(255, 206, 82, 0.2);
}
.card-info {
  border: 2px solid $primary-normal;
  border-radius: 4px;

  background-color: rgba(27, 105, 210, 0.2);
}

// <===================== FIM DA CONFIGURAÇÃO PADRÃO =====================>

// Section Hero

.bg-hero {
  width: 100%;
  height: 100%;

  position: absolute;
  top: 70%;
  left: 15%;

  transform: translate(-0%, -50%) scale(1.5);

  @include responsive(s) {
    top: 50%;
    left: 00%;

    transform: translate(-0%, -50%) scale(2.5);
  }

  transition: 1s ease;
}

.max-width-p {
  max-width: 520px;
}

.icon1-hero {
  position: relative;
  width: 64px;

  @include responsive(s) {
    width: 48px;
  }

  &::after {
    content: "";
    position: absolute;

    width: 64px;
    height: 64px;

    top: -16px;
    left: 50%;
    transform: translate(-50%, -50%);

    @include responsive(s) {
      width: 56px;
      height: 56px;
    }

    background-image: url("../svg/icon-building.svg");
    background-size: 60%;
    background-repeat: no-repeat;
    background-position: center center;

    border-radius: 50%;

    animation: chage-icon 12s ease infinite alternate;
  }

  &::before {
    content: "";

    position: absolute;
    top: 12px;
    left: 0;

    width: 64px;
    height: 64px;

    top: -16px;
    left: 50%;
    transform: translate(-50%, -50%);

    @include responsive(s) {
      width: 56px;
      height: 56px;
    }

    background-color: $white-normal;
    border-radius: 50%;
    transition: 0.7s ease;
  }

  &:hover {
    &::before {
      background-color: $secondary-normal;
    }
  }
}
@keyframes chage-icon {
  0%,
  20% {
    opacity: 1;
    background-image: url("../svg/icon-building.svg");
    background-size: 60%;
  }
  25% {
    opacity: 0;
  }
  30%,
  50% {
    opacity: 1;
    background-image: url("../svg/icon-euro.svg");
    background-size: 60%;
  }
  55% {
    opacity: 0;
  }
  60%,
  80% {
    opacity: 1;
    background-image: url("../svg/icon-card.svg");
    background-size: 60%;
  }
  85% {
    opacity: 0;
  }
  90%,
  100% {
    opacity: 1;
    background-image: url("../svg/icon-smartphone.svg");
    background-size: 60%;
  }
}

.icon2-hero {
  position: relative;
  width: 64px;

  @include responsive(s) {
    width: 48px;
  }

  &::after {
    content: "";
    position: absolute;

    width: 64px;
    height: 64px;

    bottom: -16px;
    left: 0;
    transform: translate(-50%, -50%);

    @include responsive(s) {
      width: 56px;
      height: 56px;
    }

    background-image: url("../svg/icon-heart.svg");
    background-size: 60%;
    background-repeat: no-repeat;
    background-position: center center;

    border-radius: 50%;

    animation: pulse-heart 1s ease infinite alternate;
  }

  &::before {
    content: "";

    position: absolute;
    top: 12px;
    left: 0;

    width: 64px;
    height: 64px;

    top: -16px;
    left: 50%;
    transform: translate(-50%, -50%);

    @include responsive(s) {
      width: 56px;
      height: 56px;
    }

    background-color: $secondary-normal;
    border-radius: 50%;
    transition: 0.7s ease;
  }

  &:hover {
    &::before {
      background-color: $white-normal;
    }
  }
}
@keyframes pulse-heart {
  0% {
    transform: scale(1);
  }
  100% {
    transform: scale(1.2);
  }
}

// Cartões

// Layout do cartão
.card-fig {
  width: 260px;
  height: 382px;

  @include responsive(s) {
    width: 220px;
    height: 322px;
  }

  border-radius: 16px;

  position: relative;

  background: linear-gradient(
    217.08deg,
    rgba(187, 231, 104, 0.6) 2.12%,
    rgba(73, 96, 34, 0.6) 98.96%
  );
  border: 2px solid rgba(169, 201, 107, 0.99);
  box-shadow: 12px 32px 72px rgba(78, 89, 59, 0.4);
  backdrop-filter: blur(16px);
}
// Posição do cartão - Verso
.card-verse {
  position: absolute;
  top: 5%;
  right: 10%;

  transform: rotate(15deg);
}
// Animação p/ movimentar cartão - Verso
.card-transform-verse {
  top: 25%;
  right: 15%;
  transform: skewX(-10deg) skewY(10deg) rotate(45deg);

  animation: card-transform-verse 3s ease-in-out infinite alternate;

  @include responsive(s) {
    //display: none;
  }
}
@keyframes card-transform-verse {
  0% {
    transform: rotateX(-30deg) rotateY(5deg) rotate(45deg);
  }
  100% {
    transform: rotateX(30deg) rotateY(5deg) rotate(45deg);
  }
}
// Aplicar um efeito escuro ao cartão - Verso
.card-black {
  background: linear-gradient(
    225deg,
    rgba(62, 79, 29, 0.9) 2.12%,
    rgba(89, 102, 67, 0.9) 98.96%
  );
  border: 2px solid #4e5c37;
}

// Posição do numero do cartao - Verso
.card-number{
  position: absolute;
  top: 0;
  right: 0;
}

// Posição do cartão - Frente
.card-front {
  position: absolute;
  top: -5%;
  left: 10%;

  transform: rotate(-15deg);
}
// Animação p/ movimentar cartão - Frente
.card-transform-front {
  top: 15%;
  left: 10%;

  transform: rotateX(-15deg) rotateY(-50deg) rotate(-30deg);

  animation: card-transform-front 3s ease-in-out infinite alternate;
}
@keyframes card-transform-front {
  0% {
    transform: rotateX(-10deg) rotateY(-5deg) rotate(-30deg);
  }
  100% {
    transform: rotateX(-20deg) rotateY(-30deg) rotate(-45deg);
  }
}

// Disposição dos itens no cartão - Frente
.card-content-description{
  position: absolute;
  bottom: 0;
  left: 0;
}

// Posicao do Logo no cartão - Frente
.card-logo{
  position: absolute;
  top: 0;
  left: 0;
}

// Posição do icone de "aproximacao" - Frente
.card-contactless{
  position: absolute;
  top: 0;
  right: 0;
}

.div-card{
  min-height: 500px;

  @include responsive(s){
    min-height: 400px;
  }
}